#pragma once
#include <Protocol/CHeader.h>
#include <Protocol/IRespond.h>

namespace ICC
{
	namespace PROTOCOL
	{
		class CSearchAlarmFeedbackRespond :
			public IRespond
		{
		public:
			virtual std::string ToString(JsonParser::IJsonPtr p_pJson)
			{
				if (nullptr == p_pJson)
				{
					return "";
				}

				m_oHeader.SaveTo(p_pJson);
				p_pJson->SetNodeValue("/body/count", m_oBody.m_strCount);

				unsigned int l_uiIndex = 0;
				auto it = m_oBody.m_vecData.begin();
				for (; it != m_oBody.m_vecData.end();++it)
				{
					std::string l_strPrefixPath("/body/data/" + std::to_string(l_uiIndex) + "/");

					p_pJson->SetNodeValue(l_strPrefixPath + "id", it->m_strID);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_id", it->m_strAlarmID);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_id", it->m_strProcessID);
					p_pJson->SetNodeValue(l_strPrefixPath + "result_type", it->m_strResultType);
					p_pJson->SetNodeValue(l_strPrefixPath + "result_content", it->m_strResultContent);
					p_pJson->SetNodeValue(l_strPrefixPath + "leader_instruction", it->m_strLeaderInstruction);
					p_pJson->SetNodeValue(l_strPrefixPath + "state", it->m_strState);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_edit", it->m_strTimeEdit);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_submit", it->m_strTimeSubmit);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_arrived", it->m_strTimeArrived);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_signed", it->m_strTimeSigned);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_police_dispatch", it->m_strTimePoliceDispatch);
					p_pJson->SetNodeValue(l_strPrefixPath + "time_police_arrived", it->m_strTimePoliceArrived);
					p_pJson->SetNodeValue(l_strPrefixPath + "actual_occur_time", it->m_strActualOccurTime);
					p_pJson->SetNodeValue(l_strPrefixPath + "actual_occur_addr", it->m_strActualOccurAddr);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_dept_district_code", it->m_strFeedbackDeptDistrictCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_dept_code", it->m_strFeedbackDeptCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_dept_name", it->m_strFeedbackDeptName);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_code", it->m_strFeedbackCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_name", it->m_strFeedbackName);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_leader_code", it->m_strFeedbackLeaderCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "feedback_leader_name", it->m_strFeedbackLeaderName);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_dept_district_code", it->m_strProcessDeptDistrictCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_dept_code", it->m_strProcessDeptCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_dept_name", it->m_strProcessDeptName);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_code", it->m_strProcessCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_name", it->m_strProcessName);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_leader_code", it->m_strProcessLeaderCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "process_leader_name", it->m_strProcessLeaderName);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_dept_district_code", it->m_strDispatchDeptDistrictCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_dept_code", it->m_strDispatchDeptCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_dept_name", it->m_strDispatchDeptName);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_code", it->m_strDispatchCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_name", it->m_strDispatchName);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_leader_code", it->m_strDispatchLeaderCode);
					p_pJson->SetNodeValue(l_strPrefixPath + "dispatch_leader_name", it->m_strDispatchLeaderName);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_id", it->m_strPersonId);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_id_type", it->m_strPersonIdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_nationality", it->m_strPersonNationality);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_name", it->m_strPersonName);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_slave_id", it->m_strPersonSlaveId);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_slave_id_type", it->m_strPersonSlaveIdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_slave_nationality", it->m_strPersonSlaveNationality);
					p_pJson->SetNodeValue(l_strPrefixPath + "person_slave_name", it->m_strPersonSlaveName);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_first_type", it->m_strAlarmFirstType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_second_type", it->m_strAlarmSecondType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_third_type", it->m_strAlarmThirdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_fourth_type", it->m_strAlarmFourthType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_addr_dept_name", it->m_strAlarmAddrDeptName);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_addr_first_type", it->m_strAlarmAddrFirstType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_addr_second_type", it->m_strAlarmAddrSecondType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_addr_third_type", it->m_strAlarmAddrThirdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_longitude", it->m_strAlarmLongitude);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_latitude", it->m_strAlarmLatitude);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_region_type", it->m_strAlarmRegionType);
					p_pJson->SetNodeValue(l_strPrefixPath + "alarm_location_type", it->m_strAlarmLocationType);
					p_pJson->SetNodeValue(l_strPrefixPath + "people_num_capture", it->m_strPeopleNumCapture);
					p_pJson->SetNodeValue(l_strPrefixPath + "people_num_rescue", it->m_strPeopleNumRescue);
					p_pJson->SetNodeValue(l_strPrefixPath + "people_num_slight_injury", it->m_strPeopleNumSlightInjury);
					p_pJson->SetNodeValue(l_strPrefixPath + "people_num_serious_injury", it->m_strPeopleNumSeriousInjury);
					p_pJson->SetNodeValue(l_strPrefixPath + "people_num_death", it->m_strPeopleNumDeath);
					p_pJson->SetNodeValue(l_strPrefixPath + "police_num_dispatch", it->m_strPoliceNumDispatch);
					p_pJson->SetNodeValue(l_strPrefixPath + "police_car_num_dispatch", it->m_strPoliceCarNumDispatch);
					p_pJson->SetNodeValue(l_strPrefixPath + "economy_loss", it->m_strEconomyLoss);
					p_pJson->SetNodeValue(l_strPrefixPath + "retrieve_economy_loss", it->m_strRetrieveEconomyLoss);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_put_out_time", it->m_strFirePutOutTime);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_building_first_type", it->m_strFireBuildingFirstType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_building_second_type", it->m_strFireBuildingSecondType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_building_third_type", it->m_strFireBuildingThirdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_source_type", it->m_strFireSourceType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_region_type", it->m_strFireRegionType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_cause_first_type", it->m_strFireCauseFirstType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_cause_second_type", it->m_strFireCauseSecondType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_cause_third_type", it->m_strFireCauseThirdType);
					p_pJson->SetNodeValue(l_strPrefixPath + "fire_area", it->m_strFireArea);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_road_level", it->m_strTrafficRoadLevel);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_accident_level", it->m_strTrafficAccidentLevel);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_vehicle_no", it->m_strTrafficVehicleNo);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_vehicle_type", it->m_strTrafficVehicleType);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_slave_vehicle_no", it->m_strTrafficSlaveVehicleNo);
					p_pJson->SetNodeValue(l_strPrefixPath + "traffic_slave_vehicle_type", it->m_strTrafficSlaveVehicleType);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_solve_crown", it->m_strIsSolveCrown);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_solve_public_security", it->m_strIsSolvePublicSecurity);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_foreign", it->m_strIsInvolveForeign);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_police", it->m_strIsInvolvePolice);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_gun", it->m_strIsInvolveGun);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_knife", it->m_strIsInvolveKnife);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_terror", it->m_strIsInvolveTerror);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_pornography", it->m_strIsInvolvePornography);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_gamble", it->m_strIsInvolveGamble);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_poison", it->m_strIsInvolvePoison);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_ext1", it->m_strIsInvolveExt1);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_ext2", it->m_strIsInvolveExt2);
					p_pJson->SetNodeValue(l_strPrefixPath + "is_involve_ext3", it->m_strIsInvolveExt3);

					p_pJson->SetNodeValue(l_strPrefixPath + "event_type", it->m_strEventType);
					p_pJson->SetNodeValue(l_strPrefixPath + "create_user", it->m_strCreateUser);
					p_pJson->SetNodeValue(l_strPrefixPath + "create_time", it->m_strCreateTime);
					p_pJson->SetNodeValue(l_strPrefixPath + "update_user", it->m_strUpdateUser);
					p_pJson->SetNodeValue(l_strPrefixPath + "update_time", it->m_strUpdateTime);

					++l_uiIndex;
				}

				return p_pJson->ToString();
			}

		public:
			class CFeedbackData
			{
			public:
				std::string m_strID;                             //·´À¡µ¥±àºÅ
				std::string m_strAlarmID;                        //½Ó¾¯µ¥±àºÅ
				std::string m_strProcessID;                      //´¦¾¯µ¥±àºÅ
				std::string m_strResultType;                     //·´À¡ÀàÐÍ
				std::string m_strResultContent;                  //´¦Àí½á¹ûÄÚÈÝ
				std::string m_strLeaderInstruction;              //Áìµ¼Ö¸Ê¾
				std::string m_strState;                          //·´À¡µ¥×´Ì¬
				std::string m_strTimeEdit;                       //·´À¡µ¥±à¼­Ê±¼ä
				std::string m_strTimeSubmit;                     //·´À¡µ¥Ìá½»Ê±¼ä
				std::string m_strTimeArrived;                    //·´À¡µ¥µ½´ïÊ±¼ä
				std::string m_strTimeSigned;                     //·´À¡µ¥Ç©ÊÕÊ±¼ä
				std::string m_strTimePoliceDispatch;             //Êµ¼ÊÅÉ³ö¾¯Á¦Ê±¼ä
				std::string m_strTimePoliceArrived;              //¾¯Á¦µ½´ïÏÖ³¡Ê±¼ä
				std::string m_strActualOccurTime;                //¾¯ÇéÊµ¼Ê·¢ÉúÊ±¼ä
				std::string m_strActualOccurAddr;                //¾¯ÇéÊµ¼Ê·¢ÉúµØÖ·
				std::string m_strFeedbackDeptDistrictCode;       //·´À¡µ¥Î»ÐÐÕþÇø»®
				std::string m_strFeedbackDeptCode;               //·´À¡µ¥Î»±àºÅ
				std::string m_strFeedbackDeptName;               //·´À¡µ¥Î»Ãû³Æ
				std::string m_strFeedbackCode;                   //·´À¡ÈË±àºÅ
				std::string m_strFeedbackName;                   //·´À¡ÈËÐÕÃû
				std::string m_strFeedbackLeaderCode;             //·´À¡µ¥Î»Áìµ¼±àºÅ
				std::string m_strFeedbackLeaderName;             //·´À¡µ¥Î»Áìµ¼ÐÕÃû
				std::string m_strProcessDeptDistrictCode;        //´¦¾¯µ¥Î»ÐÐÕþÇø»®
				std::string m_strProcessDeptCode;                //´¦¾¯µ¥Î»±àºÅ
				std::string m_strProcessDeptName;                //´¦¾¯µ¥Î»Ãû³Æ
				std::string m_strProcessCode;                    //´¦¾¯ÈË±àºÅ
				std::string m_strProcessName;                    //´¦¾¯ÈËÊ±¼ä
				std::string m_strProcessLeaderCode;              //´¦¾¯µ¥Î»Áìµ¼±àºÅ
				std::string m_strProcessLeaderName;              //´¦¾¯µ¥Î»Áìµ¼ÐÕÃû
				std::string m_strDispatchDeptDistrictCode;       //ÅÉ¾¯µ¥Î»ÐÐÕþÇø»®
				std::string m_strDispatchDeptCode;               //ÅÉ¾¯µ¥Î»±àºÅ
				std::string m_strDispatchDeptName;               //ÅÉ¾¯µ¥Î»Ãû³Æ
				std::string m_strDispatchCode;                   //ÅÉ¾¯ÈË±àºÅ
				std::string m_strDispatchName;                   //ÅÉ¾¯ÈËÐÕÃû
				std::string m_strDispatchLeaderCode;             //ÅÉ¾¯µ¥Î»Áìµ¼±àºÅ
				std::string m_strDispatchLeaderName;             //ÅÉ¾¯µ¥Î»Áìµ¼ÐÕÃû
				std::string m_strPersonId;                       //µÚÒ»¸öµ±ÊÂÈËÖ¤¼þºÅ
				std::string m_strPersonIdType;                   //µÚÒ»¸öµ±ÊÂÈËÖ¤¼þÀàÐÍ
				std::string m_strPersonNationality;              //µÚÒ»¸öµ±ÊÂÈË¹ú¼®
				std::string m_strPersonName;                     //µÚÒ»¸öµ±ÊÂÈËÐÕÃû
				std::string m_strPersonSlaveId;                  //µÚ¶þ¸öµ±ÊÂÈËÖ¤¼þºÅ
				std::string m_strPersonSlaveIdType;              //µÚ¶þ¸öµ±ÊÂÈËÖ¤¼þÀàÐÍ
				std::string m_strPersonSlaveNationality;         //µÚ¶þ¸öµ±ÊÂÈË¹ú¼®
				std::string m_strPersonSlaveName;                //µÚ¶þ¸öµ±ÊÂÈËÐÕÃû
				std::string m_strAlarmCalledNoType;              //¾¯Çé±¨¾¯µç»°ÀàÐÍ
				std::string m_strAlarmFirstType;                 //¾¯ÇéÒ»¼¶ÀàÐÍ
				std::string m_strAlarmSecondType;                //¾¯Çé¶þ¼¶ÀàÐÍ
				std::string m_strAlarmThirdType;                 //¾¯ÇéÈý¼¶ÀàÐÍ
				std::string m_strAlarmFourthType;                //ÐÌÊÂ¾¯ÇéÏ¸Àà´úÂë£»Èç£º·ÖÁÑ¹ú¼Ò
				std::string m_strAlarmAddrDeptName;              //¾¯Çé·¢ÉúµØµ¥Î»Ãû³Æ
				std::string m_strAlarmAddrFirstType;             //¾¯Çé·¢ÉúµØÒ»¼¶ÀàÐÍ
				std::string m_strAlarmAddrSecondType;            //¾¯Çé·¢ÉúµØ¶þ¼¶ÀàÐÍ
				std::string m_strAlarmAddrThirdType;             //¾¯Çé·¢ÉúµØÈý¼¶ÀàÐÍ
				std::string m_strAlarmLongitude;                 //¾¯Çé·¢ÉúµØ¾­¶È
				std::string m_strAlarmLatitude;                  //¾¯Çé·¢ÉúµØÎ³¶È
				std::string m_strAlarmRegionType;                //¾¯Çé·¢ÉúµØÇøÓòÀàÐÍ; Èç:½¼Çø¡¢³ÇÇø
				std::string m_strAlarmLocationType;              //¾¯Çé·¢ÉúµØ³¡ËùÀàÐÍ´úÂë£»Èç£º¾ÓÃñÇø
				std::string m_strPeopleNumCapture;               //×¥»ñÈËÊý
				std::string m_strPeopleNumRescue;                //¾ÈÖúÈËÊý
				std::string m_strPeopleNumSlightInjury;          //ÇáÉËÈËÊý
				std::string m_strPeopleNumSeriousInjury;         //ÖØÉËÈËÊý
				std::string m_strPeopleNumDeath;                 //ËÀÍöÈËÊý
				std::string m_strPoliceNumDispatch;              //³ö¶¯¾¯Á¦Êý
				std::string m_strPoliceCarNumDispatch;           //³ö¶¯³µÁ¾Êý
				std::string m_strEconomyLoss;                    //¾­¼ÃËðÊ§
				std::string m_strRetrieveEconomyLoss;            //Íì»Ø¾­¼ÃËðÊ§
				std::string m_strFirePutOutTime;                 //»ðÔÖ¾¯Çé£º»ðÔÖÆËÃðÊ±¼ä
				std::string m_strFireBuildingFirstType;          //»ðÔÖ¾¯Çé£ºÆð»ð½¨ÖþÀà±ðÒ»¼¶´úÂë
				std::string m_strFireBuildingSecondType;         //»ðÔÖ¾¯Çé£ºÆð»ð½¨ÖþÀà±ð¶þ¼¶´úÂë
				std::string m_strFireBuildingThirdType;          //»ðÔÖ¾¯Çé£ºÆð»ð½¨ÖþÀà±ðÈý¼¶´úÂë
				std::string m_strFireSourceType;                 //»ðÔÖ¾¯Çé£ºÆð»ðÔ´ÀàÐÍ´úÂë£»Èç£º¼Ò¾ß
				std::string m_strFireRegionType;                 //»ðÔÖ¾¯Çé£ºÆð»ðÇøÓòÀàÐÍ´úÂë£»Èç£ºÑôÌ¨¡¢¿ÍÌüµÈ
				std::string m_strFireCauseFirstType;             //»ðÔÖ¾¯Çé£º»ðÔÖÔ­ÒòÒ»¼¶´úÂë
				std::string m_strFireCauseSecondType;            //»ðÔÖ¾¯Çé£º»ðÔÖÔ­Òò¶þ¼¶´úÂë
				std::string m_strFireCauseThirdType;             //»ðÔÖ¾¯Çé£º»ðÔÖÔ­ÒòÈý¼¶´úÂë
				std::string m_strFireArea;                       //»ðÔÖ¾¯Çé£ºÈ¼ÉÕÃæ»ý
				std::string m_strTrafficRoadLevel;               //½»Í¨¾¯Çé£ºµÀÂ·µÈ¼¶´úÂë
				std::string m_strTrafficAccidentLevel;           //½»Í¨¾¯Çé£º¾¯ÇéµÈ¼¶´úÂë
				std::string m_strTrafficVehicleNo;               //½»Í¨¾¯Çé£ºÊÂ¹Ê³µÁ¾³µÅÆºÅ
				std::string m_strTrafficVehicleType;             //½»Í¨¾¯Çé£ºÊÂ¹Ê³µÁ¾ÀàÐÍ´úÂë
				std::string m_strTrafficSlaveVehicleNo;          //½»Í¨¾¯Çé£ºµÚ¶þ¸ö³µÁ¾³µÅÆºÅ
				std::string m_strTrafficSlaveVehicleType;        //½»Í¨¾¯Çé£ºµÚ¶þ¸ö³µÁ¾ÀàÐÍ´úÂë
				std::string m_strIsSolveCrown;                   //ÊÇ·ñÆÆ»ñÐÌÊÂ°¸¼þ
				std::string m_strIsSolvePublicSecurity;          //ÊÇ·ñ²é´¦ÖÎ°²°¸¼þ
				std::string m_strIsInvolveForeign;               //ÊÇ·ñÉæÍâ
				std::string m_strIsInvolvePolice;                //ÊÇ·ñÉæ¾¯
				std::string m_strIsInvolveGun;                   //ÊÇ·ñÉæÇ¹
				std::string m_strIsInvolveKnife;                 //ÊÇ·ñÉæµ¶
				std::string m_strIsInvolveTerror;                //ÊÇ·ñÉæ¿Ö
				std::string m_strIsInvolvePornography;           //ÊÇ·ñÉæ»Æ
				std::string m_strIsInvolveGamble;                //ÊÇ·ñÉæ¶Ä
				std::string m_strIsInvolvePoison;                //ÊÇ·ñÉæ¶¾
				std::string m_strIsInvolveExt1;                  //À©Õ¹×Ö¶Î1
				std::string m_strIsInvolveExt2;                  //À©Õ¹×Ö¶Î2
				std::string m_strIsInvolveExt3;                  //À©Õ¹×Ö¶Î3
				std::string m_strEventType;

				std::string m_strCreateUser;					 //´´½¨ÈË
				std::string m_strCreateTime;					 //´´½¨Ê±¼ä
				std::string m_strUpdateUser;					 //ÐÞ¸ÄÈË
				std::string m_strUpdateTime;					 //ÐÞ¸ÄÊ±¼ä
			};
			class CBody
			{
			public:
				std::string m_strCount;
				std::vector<CFeedbackData> m_vecData;
			};
			CHeaderEx m_oHeader;
			CBody	m_oBody;
		};
	}
}